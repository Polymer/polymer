{"version":3,"file":"build/polymer.js","sources":["src/polymer.js","src/boot.js","src/lib/lang.js","src/lib/job.js","src/lib/dom.js","src/lib/super.js","src/lib/deserialize.js","src/api.js","src/instance/utils.js","src/instance/events.js","src/instance/attributes.js","src/instance/properties.js","src/instance/mdv.js","src/instance/base.js","src/instance/styles.js","src/declaration/path.js","src/declaration/styles.js","src/declaration/events.js","src/declaration/properties.js","src/declaration/attributes.js","src/declaration/prototype.js","src/declaration/polymer-element.js"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\nPolymer = {};\r\n","/*\r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n\r\n\r\n// TODO(sorvell): this ensures Polymer is an object and not a function\r\n// Platform is currently defining it as a function to allow for async loading\r\n// of polymer; once we refine the loading process this likely goes away.\r\nif (typeof window.Polymer === 'function') {\r\n  Polymer = {};\r\n}\r\n\r\n(function(scope) {\r\n  // FOUC prevention tactic\r\n  // default list of veiled elements\r\n  scope.veiledElements = ['body'];\r\n  // add polymer styles\r\n  var VEILED_CLASS = 'polymer-veiled';\r\n  var UNVEIL_CLASS = 'polymer-unveil';\r\n  var TRANSITION_TIME = 0.3;\r\n  var style = document.createElement('style');\r\n  style.textContent = '.' + VEILED_CLASS + ' { ' +\r\n      'opacity: 0; } \\n' +\r\n      '.' + UNVEIL_CLASS +  '{ ' +\r\n      '-webkit-transition: opacity ' + TRANSITION_TIME + 's; ' +\r\n      'transition: opacity ' + TRANSITION_TIME +'s; }\\n';\r\n  var head = document.querySelector('head');\r\n  head.insertBefore(style, head.firstChild);\r\n\r\n  // apply veiled class\r\n  function veilElements() {\r\n    var veiled = Polymer.veiledElements;\r\n    if (veiled) {\r\n      for (var i=0, l=veiled.length, u; (i<l) && (u=veiled[i]); i++) {\r\n        veilElementsBySelector(u);\r\n      }\r\n    }\r\n  }\r\n\r\n  function veilElementsBySelector(selector) {\r\n    var nodes = document.querySelectorAll(selector);\r\n    for (var i=0, l=nodes.length, n; (i<l) && (n=nodes[i]); i++) {\r\n      n.classList.add(VEILED_CLASS);\r\n    }\r\n  }\r\n\r\n  // apply unveil class\r\n  function unveilElements() {\r\n    requestAnimationFrame(function() {\r\n      var nodes = document.querySelectorAll('.' + VEILED_CLASS);\r\n      for (var i=0, l=nodes.length, n; (i<l) && (n=nodes[i]); i++) {\r\n        n.classList.add(UNVEIL_CLASS);\r\n        n.classList.remove(VEILED_CLASS);\r\n      }\r\n      // NOTE: depends on transition end event to remove 'unveil' class.\r\n      if (nodes.length) {\r\n        var removeUnveiled = function() {\r\n          for (var i=0, l=nodes.length, n; (i<l) && (n=nodes[i]); i++) {\r\n            n.classList.remove(UNVEIL_CLASS);\r\n          }\r\n          document.body.removeEventListener(endEvent, removeUnveiled, false);\r\n        }\r\n        document.body.addEventListener(endEvent, removeUnveiled, false);\r\n      };\r\n    });\r\n  }\r\n\r\n  // determine transition end event\r\n  var endEvent = (document.documentElement.style.webkitTransition !== undefined) ?\r\n      'webkitTransitionEnd' : 'transitionend';\r\n\r\n  // hookup auto-unveiling\r\n  document.addEventListener('DOMContentLoaded', veilElements);\r\n  window.addEventListener('WebComponentsReady', unveilElements);\r\n\r\n  // exports\r\n  // can dynamically unveil elements by adding the veiled class and then \r\n  // calling Polymer.unveilElements\r\n  scope.unveilElements = unveilElements;\r\n\r\n})(Polymer);\r\n","/*\r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n(function(scope) {\r\n\r\n  // copy own properties from 'api' to 'prototype, with name hinting for 'super'\r\n  function extend(prototype, api) {\r\n    if (prototype && api) {\r\n      // use only own properties of 'api'\r\n      Object.getOwnPropertyNames(api).forEach(function(n) {\r\n        // acquire property descriptor\r\n        var pd = Object.getOwnPropertyDescriptor(api, n);\r\n        if (pd) {\r\n          // clone property via descriptor\r\n          Object.defineProperty(prototype, n, pd);\r\n          // cache name-of-method for 'super' engine\r\n          if (typeof pd.value == 'function') {\r\n            // hint the 'super' engine\r\n            pd.value.nom = n;\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return prototype;\r\n  }\r\n  \r\n  // exports\r\n\r\n  scope.extend = extend;\r\n\r\n})(Polymer);\r\n","/* \r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n\r\n(function(scope) {\r\n  \r\n  // usage\r\n  \r\n  // invoke cb.call(this) in 100ms, unless the job is re-registered,\r\n  // which resets the timer\r\n  // \r\n  // this.myJob = this.job(this.myJob, cb, 100)\r\n  //\r\n  // returns a job handle which can be used to re-register a job\r\n\r\n  var Job = function(inContext) {\r\n    this.context = inContext;\r\n  };\r\n  Job.prototype = {\r\n    go: function(callback, wait) {\r\n      this.callback = callback;\r\n      this.handle = setTimeout(this.complete.bind(this), wait);\r\n    },\r\n    stop: function() {\r\n      if (this.handle) {\r\n        clearTimeout(this.handle);\r\n        this.handle = null;\r\n      }\r\n    },\r\n    complete: function() {\r\n      if (this.handle) {\r\n        this.stop();\r\n        this.callback.call(this.context);\r\n      }\r\n    }\r\n  };\r\n  \r\n  function job(job, callback, wait) {\r\n    if (job) {\r\n      job.stop();\r\n    } else {\r\n      job = new Job(this);\r\n    }\r\n    job.go(callback, wait);\r\n    return job;\r\n  }\r\n  \r\n  // exports \r\n\r\n  scope.job = job;\r\n  \r\n})(Polymer);\r\n","/*\r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n(function(scope) {\r\n\r\n  var registry = {};\r\n\r\n  HTMLElement.register = function(tag, prototype) {\r\n    registry[tag] = prototype;\r\n  }\r\n\r\n  // get prototype mapped to node <tag>\r\n  HTMLElement.getPrototypeForTag = function(tag) {\r\n    var prototype = !tag ? HTMLElement.prototype : registry[tag];\r\n    // TODO(sjmiles): creating <tag> is likely to have wasteful side-effects\r\n    return prototype || Object.getPrototypeOf(document.createElement(tag));\r\n  };\r\n\r\n  // we have to flag propagation stoppage for the event dispatcher\r\n  var originalStopPropagation = Event.prototype.stopPropagation;\r\n  Event.prototype.stopPropagation = function() {\r\n    this.cancelBubble = true;\r\n    originalStopPropagation.apply(this, arguments);\r\n  };\r\n  \r\n  HTMLImports.importer.preloadSelectors += \r\n      ', polymer-element link[rel=stylesheet]';\r\n\r\n})(Polymer);\r\n","/*\r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n (function(scope) {\r\n    // super\r\n\r\n    // `arrayOfArgs` is an optional array of args like one might pass\r\n    // to `Function.apply`\r\n\r\n    // TODO(sjmiles):\r\n    //    $super must be installed on an instance or prototype chain\r\n    //    as `super`, and invoked via `this`, e.g.\r\n    //      `this.super();`\r\n     \r\n    //    will not work if function objects are not unique, for example,\r\n    //    when using mixins.\r\n    //    The memoization strategy assumes each function exists on only one \r\n    //    prototype chain i.e. we use the function object for memoizing)\r\n    //    perhaps we can bookkeep on the prototype itself instead\r\n    function $super(arrayOfArgs) {\r\n      // since we are thunking a method call, performance is important here: \r\n      // memoize all lookups, once memoized the fast path calls no other \r\n      // functions\r\n      //\r\n      // find the caller (cannot be `strict` because of 'caller')\r\n      var caller = $super.caller;\r\n      // memoized 'name of method' \r\n      var nom = caller.nom;\r\n      // memoized next implementation prototype\r\n      var _super = caller._super;\r\n      if (!_super) {\r\n        if (!nom) {\r\n          nom = caller.nom = nameInThis.call(this, caller);\r\n        }\r\n        if (!nom) {\r\n          console.warn('called super() on a method not installed declaratively (has no .nom property)');\r\n        }\r\n        // super prototype is either cached or we have to find it\r\n        // by searching __proto__ (at the 'top')\r\n        _super = memoizeSuper(caller, nom, getPrototypeOf(this));\r\n      }\r\n      if (!_super) {\r\n        // if _super is falsey, there is no super implementation\r\n        //console.warn('called $super(' + nom + ') where there is no super implementation');\r\n      } else {\r\n        // our super function\r\n        var fn = _super[nom];\r\n        // memoize information so 'fn' can call 'super'\r\n        if (!fn._super) {\r\n          memoizeSuper(fn, nom, _super);\r\n        }\r\n        // invoke the inherited method\r\n        // if 'fn' is not function valued, this will throw\r\n        return fn.apply(this, arrayOfArgs || []);\r\n      }\r\n    }\r\n\r\n    function nextSuper(proto, name, caller) {\r\n      // look for an inherited prototype that implements name\r\n      while (proto) {\r\n        if ((proto[name] !== caller) && proto[name]) {\r\n          return proto;\r\n        }\r\n        proto = getPrototypeOf(proto);\r\n      }\r\n    }\r\n\r\n    function memoizeSuper(method, name, proto) {\r\n      // find and cache next prototype containing `name`\r\n      // we need the prototype so we can do another lookup\r\n      // from here\r\n      method._super = nextSuper(proto, name, method);\r\n      if (method._super) {\r\n        // _super is a prototype, the actual method is _super[name]\r\n        // tag super method with it's name for further lookups\r\n        method._super[name].nom = name;\r\n      }\r\n      return method._super;\r\n    }\r\n\r\n    function nameInThis(value) {\r\n      var p = this.__proto__;\r\n      while (p && p !== HTMLElement.prototype) {\r\n        // TODO(sjmiles): getOwnPropertyNames is absurdly expensive\r\n        var n$ = Object.getOwnPropertyNames(p);\r\n        for (var i=0, l=n$.length, n; i<l && (n=n$[i]); i++) {\r\n          var d = Object.getOwnPropertyDescriptor(p, n);\r\n          if (typeof d.value === 'function' && d.value === value) {\r\n            return n;\r\n          }\r\n        }\r\n        p = p.__proto__;\r\n      }\r\n    }\r\n\r\n    // NOTE: In some platforms (IE10) the prototype chain is faked via \r\n    // __proto__. Therefore, always get prototype via __proto__ instead of\r\n    // the more standard Object.getPrototypeOf.\r\n    function getPrototypeOf(prototype) {\r\n      return prototype.__proto__;\r\n    }\r\n\r\n    // utility function to precompute name tags for functions\r\n    // in a (unchained) prototype\r\n    function hintSuper(prototype) {\r\n      // tag functions with their prototype name to optimize\r\n      // super call invocations\r\n      for (var n in prototype) {\r\n        var pd = Object.getOwnPropertyDescriptor(prototype, n);\r\n        if (pd && typeof pd.value === 'function') {\r\n          pd.value.nom = n;\r\n        }\r\n      }\r\n    }\r\n\r\n    // exports\r\n\r\n    scope.super = $super;\r\n\r\n})(Polymer);\r\n","/* \r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n\r\n(function(scope) {\r\n\r\n  var typeHandlers = {\r\n    string: function(value) {\r\n      return value;\r\n    },\r\n    date: function(value) {\r\n      return new Date(Date.parse(value) || Date.now());\r\n    },\r\n    boolean: function(value) {\r\n      if (value === '') {\r\n        return true;\r\n      }\r\n      return value === 'false' ? false : !!value;\r\n    },\r\n    number: function(value) {\r\n      var floatVal = parseFloat(value);\r\n      return (String(floatVal) === value) ? floatVal : value;\r\n    },\r\n    object: function(value, currentValue) {\r\n      if (currentValue === null) {\r\n        return value;\r\n      }\r\n      try {\r\n        // If the string is an object, we can parse is with the JSON library.\r\n        // include convenience replace for single-quotes. If the author omits\r\n        // quotes altogether, parse will fail.\r\n        return JSON.parse(value.replace(/'/g, '\"'));\r\n      } catch(e) {\r\n        // The object isn't valid JSON, return the raw value\r\n        return value;\r\n      }\r\n    },\r\n    // avoid deserialization of functions\r\n    'function': function(value, currentValue) {\r\n      return currentValue;\r\n    }\r\n  };\r\n\r\n  function deserializeValue(value, currentValue) {\r\n    // attempt to infer type from default value\r\n    var inferredType = typeof currentValue;\r\n    // invent 'date' type value for Date\r\n    if (currentValue instanceof Date) {\r\n      inferredType = 'date';\r\n    }\r\n    // delegate deserialization via type string\r\n    return typeHandlers[inferredType](value, currentValue);\r\n  }\r\n\r\n  // exports\r\n\r\n  scope.deserializeValue = deserializeValue;\r\n\r\n})(Polymer);\r\n","/*\r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n(function(scope) {\r\n\r\n  var api = {};\r\n\r\n  api.declaration = {};\r\n  api.instance = {};\r\n\r\n  // exports\r\n\r\n  scope.api = api;\r\n\r\n})(Polymer);\r\n","/*\r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n(function(scope) {\r\n\r\n  var utils = {\r\n    /**\r\n      * Invokes a function asynchronously. The context of the callback\r\n      * function is bound to 'this' automatically.\r\n      * @method async\r\n      * @param {Function|String} method\r\n      * @param {any|Array} args\r\n      * @param {number} timeout\r\n      */\r\n    async: function(method, args, timeout) {\r\n      // when polyfilling Object.observe, ensure changes \r\n      // propagate before executing the async method\r\n      Platform.flush();\r\n      // second argument to `apply` must be an array\r\n      args = (args && args.length) ? args : [args];\r\n      // function to invoke\r\n      var fn = function() {\r\n        (this[method] || method).apply(this, args);\r\n      }.bind(this);\r\n      // execute `fn` sooner or later\r\n      return timeout ? setTimeout(fn, timeout) : requestAnimationFrame(fn);\r\n    },    \r\n    /**\r\n      * Fire an event.\r\n      * @method fire\r\n      * @param {string} type An event name.\r\n      * @param detail\r\n      * @param {Node} toNode Target node.\r\n      */\r\n    fire: function(type, detail, toNode, bubbles) {\r\n      var node = toNode || this;\r\n      //log.events && console.log('[%s]: sending [%s]', node.localName, inType);\r\n      node.dispatchEvent(\r\n        new CustomEvent(type, {\r\n          bubbles: (bubbles !== undefined ? bubbles : true), \r\n          detail: detail\r\n        }));\r\n      return detail;\r\n    },\r\n    /**\r\n      * Fire an event asynchronously.\r\n      * @method asyncFire\r\n      * @param {string} type An event name.\r\n      * @param detail\r\n      * @param {Node} toNode Target node.\r\n      */\r\n    asyncFire: function(/*inType, inDetail*/) {\r\n      this.async(\"fire\", arguments);\r\n    },\r\n    /**\r\n      * Remove class from old, add class to anew, if they exist\r\n      * @param classFollows\r\n      * @param anew A node.\r\n      * @param old A node\r\n      * @param className\r\n      */\r\n    classFollows: function(anew, old, className) {\r\n      if (old) {\r\n        old.classList.remove(className);\r\n      }\r\n      if (anew) {\r\n        anew.classList.add(className);\r\n      }\r\n    }\r\n  };\r\n\r\n  // deprecated\r\n\r\n  utils.asyncMethod = utils.async;\r\n\r\n  // exports\r\n\r\n  scope.api.instance.utils = utils;\r\n\r\n})(Polymer);\r\n","/*\r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n\r\n(function(scope) {\r\n\r\n  // imports\r\n\r\n  var log = window.logFlags || {};\r\n\r\n  // magic words\r\n\r\n  var EVENT_PREFIX = 'on-';\r\n  var HANDLED_LIST = '__eventHandledList__';\r\n\r\n  // instance events api\r\n\r\n  var events = {\r\n    // read-only\r\n    EVENT_PREFIX: EVENT_PREFIX,\r\n    // event name utilities\r\n    hasEventPrefix: function (n) {\r\n      return n && (n[0] === 'o') && (n[1] === 'n') && (n[2] === '-');\r\n    },\r\n    removeEventPrefix: function(n) {\r\n      return n.slice(prefixLength);\r\n    },\r\n    // event listeners on host\r\n    addHostListeners: function() {\r\n      var events = this.eventDelegates;\r\n      log.events && (Object.keys(events).length > 0) && console.log('[%s] addHostListeners:', this.localName, events);\r\n      this.addNodeListeners(this, events, this.hostEventListener);\r\n    },\r\n    addNodeListeners: function(node, events, listener) {\r\n      // note: conditional inside loop as optimization\r\n      // for empty 'events' object\r\n      var fn;\r\n      for (var n in events) {\r\n        if (!fn) {\r\n          fn = listener.bind(this);\r\n        }\r\n        this.addNodeListener(node, n, fn);\r\n      }\r\n    },\r\n    addNodeListener: function(node, event, listener) {\r\n      node.addEventListener(event, listener);\r\n    },\r\n    hostEventListener: function(event) {\r\n      if (!event.cancelBubble) {\r\n        log.events && console.group(\"[%s]: hostEventListener(%s)\", this.localName, event.type);\r\n        var h = this.findEventDelegate(event);\r\n        if (h) {\r\n          log.events && console.log('[%s] found host handler name [%s]', this.localName, h);\r\n          this.dispatchMethod(this, h, [event, event.detail, this]);\r\n        }\r\n        log.events && console.groupEnd();\r\n      }\r\n    },  \r\n    // find the method name in delegates mapped to event.type\r\n    findEventDelegate: function(event) {\r\n      return this.eventDelegates[event.type];\r\n    },\r\n    // call 'method' or function method on 'obj' with 'args', if the method exists\r\n    dispatchMethod: function(obj, method, args) {\r\n      if (obj) {\r\n        log.events && console.group('[%s] dispatch [%s]', obj.localName, method);\r\n        var fn = typeof method === 'function' ? method : obj[method];\r\n        if (fn) {\r\n          fn[args ? 'apply' : 'call'](obj, args);\r\n        }\r\n        log.events && console.groupEnd();\r\n        Platform.flush();\r\n      }\r\n    },\r\n    /*\r\n      Bind events via attributes of the form on-eventName.\r\n      This method hooks into the model syntax and does adds event listeners as\r\n      needed. By default, binding paths are always method names on the root\r\n      model, the custom element in which the node exists. Adding a '@' in the\r\n      path directs the event binding to use the model path as the event listener.\r\n      In both cases, the actual listener is attached to a generic method which\r\n      evaluates the bound path at event execution time. \r\n    */\r\n    prepareBinding: function(path, name, node) {\r\n      // if lhs an event prefix,\r\n      if (events.hasEventPrefix(name)) {\r\n        // provide an event-binding callback\r\n        return function(model, node) {\r\n          log.events && console.log('event: [%s].%s => [%s].%s()\"', node.localName, model.localName, path);\r\n          var listener = function(event) {\r\n            var ctrlr = findController(node);\r\n            if (ctrlr && ctrlr.dispatchMethod) {\r\n              var obj = ctrlr, method = path;\r\n              if (path[0] == '@') {\r\n                obj = model;\r\n                method = Path.get(path.slice(1)).getValueFrom(model);\r\n              }\r\n              ctrlr.dispatchMethod(obj, method, [event, event.detail, node]);\r\n            }\r\n          };\r\n          var eventName = events.removeEventPrefix(name);\r\n          node.addEventListener(eventName, listener, false);\r\n          return {\r\n            close: function() {\r\n              log.events && console.log('event.remove: [%s].%s => [%s].%s()\"', node.localName, name, model.localName, path);\r\n              node.removeEventListener(eventName, listener, false);\r\n            }\r\n          }\r\n        };\r\n      }\r\n    }\r\n  };\r\n\r\n  var prefixLength = EVENT_PREFIX.length;\r\n\r\n  function findController(node) {\r\n    while (node.parentNode) {\r\n      node = node.parentNode;\r\n    }\r\n    return node.host;\r\n  };\r\n\r\n  // exports\r\n\r\n  scope.api.instance.events = events;\r\n\r\n})(Polymer);\r\n","/*\r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n(function(scope) {\r\n\r\n  // instance api for attributes\r\n\r\n  var attributes = {\r\n    copyInstanceAttributes: function () {\r\n      var a$ = this._instanceAttributes;\r\n      for (var k in a$) {\r\n        if (!this.hasAttribute(k)) {\r\n          this.setAttribute(k, a$[k]);\r\n        }\r\n      }\r\n    },\r\n    // for each attribute on this, deserialize value to property as needed\r\n    takeAttributes: function() {\r\n      // if we have no publish lookup table, we have no attributes to take\r\n      // TODO(sjmiles): ad hoc\r\n      if (this._publishLC) {\r\n        for (var i=0, a$=this.attributes, l=a$.length, a; (a=a$[i]) && i<l; i++) {\r\n          this.attributeToProperty(a.name, a.value);\r\n        }\r\n      }\r\n    },\r\n    // if attribute 'name' is mapped to a property, deserialize\r\n    // 'value' into that property\r\n    attributeToProperty: function(name, value) {\r\n      // try to match this attribute to a property (attributes are\r\n      // all lower-case, so this is case-insensitive search)\r\n      var name = this.propertyForAttribute(name);\r\n      if (name) {\r\n        // filter out 'mustached' values, these are to be\r\n        // replaced with bound-data and are not yet values\r\n        // themselves\r\n        if (value && value.search(scope.bindPattern) >= 0) {\r\n          return;\r\n        }\r\n        // get original value\r\n        var currentValue = this[name];\r\n        // deserialize Boolean or Number values from attribute\r\n        var value = this.deserializeValue(value, currentValue);\r\n        // only act if the value has changed\r\n        if (value !== currentValue) {\r\n          // install new value (has side-effects)\r\n          this[name] = value;\r\n        }\r\n      }\r\n    },\r\n    // return the published property matching name, or undefined\r\n    propertyForAttribute: function(name) {\r\n      var match = this._publishLC && this._publishLC[name];\r\n      //console.log('propertyForAttribute:', name, 'matches', match);\r\n      return match;\r\n    },\r\n    // convert representation of 'stringValue' based on type of 'currentValue'\r\n    deserializeValue: function(stringValue, currentValue) {\r\n      return scope.deserializeValue(stringValue, currentValue);\r\n    },\r\n    serializeValue: function(value, inferredType) {\r\n      if (inferredType === 'boolean') {\r\n        return value ? '' : undefined;\r\n      } else if (inferredType !== 'object' && inferredType !== 'function'\r\n          && value !== undefined) {\r\n        return value;\r\n      }\r\n    },\r\n    reflectPropertyToAttribute: function(name) {\r\n      var inferredType = typeof this[name];\r\n      // try to intelligently serialize property value\r\n      var serializedValue = this.serializeValue(this[name], inferredType);\r\n      // boolean properties must reflect as boolean attributes\r\n      if (serializedValue !== undefined) {\r\n        this.setAttribute(name, serializedValue);\r\n        // TODO(sorvell): we should remove attr for all properties\r\n        // that have undefined serialization; however, we will need to\r\n        // refine the attr reflection system to achieve this; pica, for example,\r\n        // relies on having inferredType object properties not removed as\r\n        // attrs.\r\n      } else if (inferredType === 'boolean') {\r\n        this.removeAttribute(name);\r\n      }\r\n    }\r\n  };\r\n\r\n  // exports\r\n\r\n  scope.api.instance.attributes = attributes;\r\n\r\n})(Polymer);\r\n","/*\r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n(function(scope) {\r\n\r\n  // imports\r\n\r\n  var log = window.logFlags || {};\r\n\r\n  // magic words\r\n\r\n  var OBSERVE_SUFFIX = 'Changed';\r\n\r\n  // element api\r\n\r\n  var empty = [];\r\n\r\n  var properties = {\r\n    observeProperties: function() {\r\n      var n$ = this._observeNames, pn$ = this._publishNames;\r\n      if ((n$ && n$.length) || (pn$ && pn$.length)) {\r\n        var self = this;\r\n        var o = this._propertyObserver = generateCompoundPathObserver(this);\r\n        for (var i=0, l=n$.length, n; (i<l) && (n=n$[i]); i++) {\r\n          o.addPath(this, n);\r\n          // observer array properties\r\n          var pd = Object.getOwnPropertyDescriptor(this.__proto__, n);\r\n          if (pd && pd.value) {\r\n            this.observeArrayValue(n, pd.value, null);\r\n          }\r\n        }\r\n        for (var i=0, l=pn$.length, n; (i<l) && (n=pn$[i]); i++) {\r\n          if (!this.observe || (this.observe[n] === undefined)) {\r\n            o.addPath(this, n);\r\n          }\r\n        }\r\n        o.start();\r\n      }\r\n    },\r\n    notifyPropertyChanges: function(newValues, oldValues, changedBits, paths) {\r\n      var called = {};\r\n      for (var i=0, l=changedBits.length, name, method; i<l; i++) {\r\n        if (changedBits[i]) {\r\n          // note: paths is of form [object, path, object, path]\r\n          name = paths[2 * i + 1];\r\n          if (this.publish[name] !== undefined) {\r\n            this.reflectPropertyToAttribute(name);\r\n          }\r\n          method = this.observe[name];\r\n          if (method) {\r\n            this.observeArrayValue(name, newValues[i], oldValues[i]);\r\n            if (!called[method]) {\r\n              called[method] = true;\r\n              // observes the value if it is an array\r\n              this.invokeMethod(method, [oldValues[i], newValues[i], arguments]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    observeArrayValue: function(name, value, old) {\r\n      // we only care if there are registered side-effects\r\n      var callbackName = this.observe[name];\r\n      if (callbackName) {\r\n        // if we are observing the previous value, stop\r\n        if (Array.isArray(old)) {\r\n          log.observe && console.log('[%s] observeArrayValue: unregister observer [%s]', this.localName, name);\r\n          this.unregisterObserver(name + '__array');\r\n        }\r\n        // if the new value is an array, being observing it\r\n        if (Array.isArray(value)) {\r\n          log.observe && console.log('[%s] observeArrayValue: register observer [%s]', this.localName, name, value);\r\n          var self = this;\r\n          var observer = new ArrayObserver(value, function(value, old) {\r\n            self.invokeMethod(callbackName, [old]);\r\n          });\r\n          this.registerObserver(name + '__array', observer);\r\n        }\r\n      }\r\n    },\r\n    bindProperty: function(property, model, path) {\r\n      // apply Polymer two-way reference binding\r\n      return bindProperties(this, property, model, path);\r\n    },\r\n    unbindAllProperties: function() {\r\n      if (this._propertyObserver) {\r\n        this._propertyObserver.close();\r\n      }\r\n      this.unregisterObservers();\r\n    },\r\n    unbindProperty: function(name) {\r\n      return this.unregisterObserver(name);\r\n    },\r\n    invokeMethod: function(method, args) {\r\n      var fn = this[method] || method;\r\n      if (typeof fn === 'function') {\r\n        fn.apply(this, args);\r\n      }\r\n    },\r\n    // bookkeeping observers for memory management\r\n    registerObserver: function(name, observer) {\r\n      var o$ = this._observers || (this._observers = {});\r\n      o$[name] = observer;\r\n    },\r\n    unregisterObserver: function(name) {\r\n      var o$ = this._observers;\r\n      if (o$ && o$[name]) {\r\n        o$[name].close();\r\n        o$[name] = null;\r\n        return true;\r\n      }\r\n    },\r\n    unregisterObservers: function() {\r\n      if (this._observers) {\r\n        var keys=Object.keys(this._observers);\r\n        for (var i=0, l=keys.length, k, o; (i < l) && (k=keys[i]); i++) {\r\n          o = this._observers[k];\r\n          o.close();\r\n        }\r\n        this._observers = {};\r\n      }\r\n    }\r\n  };\r\n\r\n  // compound path observer\r\n  function generateCompoundPathObserver(element) {\r\n    return new CompoundPathObserver(element.notifyPropertyChanges, element);\r\n  }\r\n\r\n  // property binding\r\n  // bind a property in A to a path in B by converting A[property] to a\r\n  // getter/setter pair that accesses B[...path...]\r\n  function bindProperties(inA, inProperty, inB, inPath) {\r\n    log.bind && console.log(LOG_BIND_PROPS, inB.localName || 'object', inPath, inA.localName, inProperty);\r\n    // capture A's value if B's value is null or undefined,\r\n    // otherwise use B's value\r\n    var path = Path.get(inPath);\r\n    var v = path.getValueFrom(inB);\r\n    if (v === null || v === undefined) {\r\n      path.setValueFrom(inB, inA[inProperty]);\r\n    }\r\n    return PathObserver.defineProperty(inA, inProperty, inB, inPath);\r\n  }\r\n\r\n  // logging\r\n  var LOG_OBSERVE = '[%s] watching [%s]';\r\n  var LOG_OBSERVED = '[%s#%s] watch: [%s] now [%s] was [%s]';\r\n  var LOG_CHANGED = '[%s#%s] propertyChanged: [%s] now [%s] was [%s]';\r\n  var LOG_BIND_PROPS = \"[%s]: bindProperties: [%s] to [%s].[%s]\";\r\n\r\n  // exports\r\n\r\n  scope.api.instance.properties = properties;\r\n\r\n})(Polymer);\r\n","/*\r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n(function(scope) {\r\n\r\n  // imports\r\n\r\n  var log = window.logFlags || 0;\r\n  var events = scope.api.instance.events;\r\n\r\n  // expressionista\r\n\r\n  // TODO(sorvell): we're patching the syntax while evaluating\r\n  // event bindings. we'll move this to a better spot when that's done.\r\n  var _prepareBinding = PolymerExpressions.prototype.prepareBinding;\r\n  // <[node] [name] = {{path}}>\r\n  PolymerExpressions.prototype.prepareBinding = function(path, name, node) {\r\n    // if not an event, delegate to the standard syntax\r\n    return events.prepareBinding(path, name, node)\r\n        || _prepareBinding.call(this, path, name, node);\r\n  };\r\n\r\n  var syntax = new PolymerExpressions();\r\n\r\n  // element api supporting mdv\r\n\r\n  var mdv = {\r\n    syntax: syntax,\r\n    instanceTemplate: function(template) {\r\n      template.bindingDelegate = this.syntax;\r\n      return template.createInstance(this);\r\n    },\r\n    bind: function(name, model, path) {\r\n      // note: binding is a prepare signal. This allows us to be sure that any\r\n      // property changes that occur as a result of binding will be observed.\r\n      if (!this._elementPrepared) {\r\n        this.prepareElement();\r\n      }\r\n      var property = this.propertyForAttribute(name);\r\n      if (!property) {\r\n        return this.super(arguments);\r\n      } else {\r\n        // clean out the closets\r\n        this.unbind(name);\r\n        // use n-way Polymer binding\r\n        var observer = this.bindProperty(property, model, path);\r\n        // stick path on observer so it's available via this.bindings\r\n        observer.path = path;\r\n        // reflect bound property to attribute when binding\r\n        // to ensure binding is not left on attribute if property\r\n        // does not update due to not changing.\r\n        this.reflectPropertyToAttribute(property);\r\n        return this.bindings[name] = observer;\r\n      }\r\n    },\r\n    asyncUnbindAll: function() {\r\n      if (!this._unbound) {\r\n        log.unbind && console.log('[%s] asyncUnbindAll', this.localName);\r\n        this._unbindAllJob = this.job(this._unbindAllJob, this.unbindAll, 0);\r\n      }\r\n    },\r\n    unbindAll: function() {\r\n      if (!this._unbound) {\r\n        this.unbindAllProperties();\r\n        this.super();\r\n        // unbind shadowRoot\r\n        var root = this.shadowRoot;\r\n        while (root) {\r\n          unbindNodeTree(root);\r\n          root = root.olderShadowRoot;\r\n        }\r\n        this._unbound = true;\r\n      }\r\n    },\r\n    cancelUnbindAll: function(preventCascade) {\r\n      if (this._unbound) {\r\n        log.unbind && console.warn('[%s] already unbound, cannot cancel unbindAll', this.localName);\r\n        return;\r\n      }\r\n      log.unbind && console.log('[%s] cancelUnbindAll', this.localName);\r\n      if (this._unbindAllJob) {\r\n        this._unbindAllJob = this._unbindAllJob.stop();\r\n      }\r\n      // cancel unbinding our shadow tree iff we're not in the process of\r\n      // cascading our tree (as we do, for example, when the element is inserted).\r\n      if (!preventCascade) {\r\n        forNodeTree(this.shadowRoot, function(n) {\r\n          if (n.cancelUnbindAll) {\r\n            n.cancelUnbindAll();\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  function unbindNodeTree(node) {\r\n    forNodeTree(node, _nodeUnbindAll);\r\n  }\r\n\r\n  function _nodeUnbindAll(node) {\r\n    node.unbindAll();\r\n  }\r\n\r\n  function forNodeTree(node, callback) {\r\n    if (node) {\r\n      callback(node);\r\n      for (var child = node.firstChild; child; child = child.nextSibling) {\r\n        forNodeTree(child, callback);\r\n      }\r\n    }\r\n  }\r\n\r\n  var mustachePattern = /\\{\\{([^{}]*)}}/;\r\n\r\n  // exports\r\n\r\n  scope.bindPattern = mustachePattern;\r\n  scope.api.instance.mdv = mdv;\r\n\r\n})(Polymer);\r\n","/*\r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n(function(scope) {\r\n  var preparingElements = 0;\r\n\r\n  var base = {\r\n    PolymerBase: true,\r\n    job: Polymer.job,\r\n    super: Polymer.super,\r\n    // user entry point for element has had its createdCallback called\r\n    created: function() {\r\n    },\r\n    // user entry point for element has shadowRoot and is ready for\r\n    // api interaction\r\n    ready: function() {\r\n    },\r\n    createdCallback: function() {\r\n      this.created();\r\n      if (this.ownerDocument.defaultView || this.alwaysPrepare ||\r\n          preparingElements > 0) {\r\n        this.prepareElement();\r\n      }\r\n    },\r\n    // system entry point, do not override\r\n    prepareElement: function() {\r\n      this._elementPrepared = true;\r\n      // install property observers\r\n      this.observeProperties();\r\n      // install boilerplate attributes\r\n      this.copyInstanceAttributes();\r\n      // process input attributes\r\n      this.takeAttributes();\r\n      // add event listeners\r\n      this.addHostListeners();\r\n      // guarantees that while preparing, any\r\n      // sub-elements are also prepared\r\n      preparingElements++;\r\n      // process declarative resources\r\n      this.parseDeclarations(this.__proto__);\r\n      // decrement semaphore\r\n      preparingElements--;\r\n      // user entry point\r\n      this.ready();\r\n    },\r\n    enteredViewCallback: function() {\r\n      if (!this._elementPrepared) {\r\n        this.prepareElement();\r\n      }\r\n      this.cancelUnbindAll(true);\r\n      // invoke user action\r\n      if (this.enteredView) {\r\n        this.enteredView();\r\n      }\r\n    },\r\n    leftViewCallback: function() {\r\n      if (!this.preventDispose) {\r\n        this.asyncUnbindAll();\r\n      }\r\n      // invoke user action\r\n      if (this.leftView) {\r\n        this.leftView();\r\n      }\r\n    },\r\n    // TODO(sorvell): bc\r\n    enteredDocumentCallback: function() {\r\n      this.enteredViewCallback();\r\n    },\r\n    // TODO(sorvell): bc\r\n    leftDocumentCallback: function() {\r\n      this.leftViewCallback();\r\n    },\r\n    // recursive ancestral <element> initialization, oldest first\r\n    parseDeclarations: function(p) {\r\n      if (p && p.element) {\r\n        this.parseDeclarations(p.__proto__);\r\n        p.parseDeclaration.call(this, p.element);\r\n      }\r\n    },\r\n    // parse input <element> as needed, override for custom behavior\r\n    parseDeclaration: function(elementElement) {\r\n      var template = this.fetchTemplate(elementElement);\r\n      if (template) {\r\n        if (this.element.hasAttribute('lightdom')) {\r\n          this.lightFromTemplate(template);\r\n        } else {\r\n          this.shadowFromTemplate(template);\r\n        }\r\n      }\r\n    },\r\n    // return a shadow-root template (if desired), override for custom behavior\r\n    fetchTemplate: function(elementElement) {\r\n      return elementElement.querySelector('template');\r\n    },\r\n    // utility function that creates a shadow root from a <template>\r\n    shadowFromTemplate: function(template) {\r\n      if (template) {\r\n        // cache elder shadow root (if any)\r\n        var elderRoot = this.shadowRoot;\r\n        // make a shadow root\r\n        var root = this.createShadowRoot();\r\n        // migrate flag(s)\r\n        root.applyAuthorStyles = this.applyAuthorStyles;\r\n        root.resetStyleInheritance = this.resetStyleInheritance;\r\n        // stamp template\r\n        // which includes parsing and applying MDV bindings before being \r\n        // inserted (to avoid {{}} in attribute values)\r\n        // e.g. to prevent <img src=\"images/{{icon}}\"> from generating a 404.\r\n        var dom = this.instanceTemplate(template);\r\n        // append to shadow dom\r\n        root.appendChild(dom);\r\n        // perform post-construction initialization tasks on shadow root\r\n        this.shadowRootReady(root, template);\r\n        // return the created shadow root\r\n        return root;\r\n      }\r\n    },\r\n    // utility function that stamps a <template> into light-dom\r\n    lightFromTemplate: function(template) {\r\n      if (template) {\r\n        // stamp template\r\n        // which includes parsing and applying MDV bindings before being \r\n        // inserted (to avoid {{}} in attribute values)\r\n        // e.g. to prevent <img src=\"images/{{icon}}\"> from generating a 404.\r\n        var dom = this.instanceTemplate(template);\r\n        // append to shadow dom\r\n        this.appendChild(dom);\r\n        // perform post-construction initialization tasks on ahem, light root\r\n        this.shadowRootReady(this, template);\r\n        // return the created shadow root\r\n        return dom;\r\n      }\r\n    },\r\n    shadowRootReady: function(root, template) {\r\n      // locate nodes with id and store references to them in this.$ hash\r\n      this.marshalNodeReferences(root);\r\n      // set up pointer gestures\r\n      PointerGestures.register(root);\r\n    },\r\n    // locate nodes with id and store references to them in this.$ hash\r\n    marshalNodeReferences: function(root) {\r\n      // establish $ instance variable\r\n      var $ = this.$ = this.$ || {};\r\n      // populate $ from nodes with ID from the LOCAL tree\r\n      if (root) {\r\n        var n$ = root.querySelectorAll(\"[id]\");\r\n        for (var i=0, l=n$.length, n; (i<l) && (n=n$[i]); i++) {\r\n          $[n.id] = n;\r\n        };\r\n      }\r\n    },\r\n    attributeChangedCallback: function(name, oldValue) {\r\n      // TODO(sjmiles): adhoc filter\r\n      if (name !== 'class' && name !== 'style') {\r\n        this.attributeToProperty(name, this.getAttribute(name));\r\n      }\r\n      if (this.attributeChanged) {\r\n        this.attributeChanged.apply(this, arguments);\r\n      }\r\n    },\r\n    onMutation: function(node, listener) {\r\n      var observer = new MutationObserver(function(mutations) {\r\n        listener.call(this, observer, mutations);\r\n        observer.disconnect();\r\n      }.bind(this));\r\n      observer.observe(node, {childList: true, subtree: true});\r\n    }\r\n  };\r\n\r\n  // true if object has own PolymerBase api\r\n  function isBase(object) {\r\n    return object.hasOwnProperty('PolymerBase') \r\n  }\r\n\r\n  // name a base constructor for dev tools\r\n\r\n  function PolymerBase() {};\r\n  PolymerBase.prototype = base;\r\n  base.constructor = PolymerBase;\r\n  \r\n  // exports\r\n\r\n  scope.Base = PolymerBase;\r\n  scope.isBase = isBase;\r\n  scope.api.instance.base = base;\r\n  \r\n})(Polymer);\r\n","/*\r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n(function(scope) {\r\n\r\n  // imports\r\n\r\n  var log = window.logFlags || {};\r\n  \r\n  // magic words\r\n  \r\n  var STYLE_SCOPE_ATTRIBUTE = 'element';\r\n  var STYLE_CONTROLLER_SCOPE = 'controller';\r\n  \r\n  var styles = {\r\n    STYLE_SCOPE_ATTRIBUTE: STYLE_SCOPE_ATTRIBUTE,\r\n    /**\r\n     * Installs external stylesheets and <style> elements with the attribute \r\n     * polymer-scope='controller' into the scope of element. This is intended\r\n     * to be a called during custom element construction. Note, this incurs a \r\n     * per instance cost and should be used sparingly.\r\n     *\r\n     * The need for this type of styling should go away when the shadowDOM spec\r\n     * addresses these issues:\r\n     * \r\n     * https://www.w3.org/Bugs/Public/show_bug.cgi?id=21391\r\n     * https://www.w3.org/Bugs/Public/show_bug.cgi?id=21390\r\n     * https://www.w3.org/Bugs/Public/show_bug.cgi?id=21389\r\n     * \r\n     * @param element The custom element instance into whose controller (parent)\r\n     * scope styles will be installed.\r\n     * @param elementElement The <element> containing controller styles.\r\n    */\r\n    // TODO(sorvell): remove when spec issues are addressed\r\n    installControllerStyles: function() {\r\n      // apply controller styles, but only if they are not yet applied\r\n      var scope = this.findStyleController();\r\n      if (scope && !this.scopeHasElementStyle(scope, STYLE_CONTROLLER_SCOPE)) {\r\n        // allow inherited controller styles\r\n        var proto = getPrototypeOf(this), cssText = '';\r\n        while (proto && proto.element) {\r\n          cssText += proto.element.cssTextForScope(STYLE_CONTROLLER_SCOPE);\r\n          proto = getPrototypeOf(proto);\r\n        }\r\n        if (cssText) {\r\n          var style = this.element.cssTextToScopeStyle(cssText,\r\n              STYLE_CONTROLLER_SCOPE);\r\n          // TODO(sorvell): for now these styles are not shimmed\r\n          // but we may need to shim them\r\n          Polymer.applyStyleToScope(style, scope);\r\n        }\r\n      }\r\n    },\r\n    findStyleController: function() {\r\n      if (window.ShadowDOMPolyfill) {\r\n        return wrap(document.head);\r\n      } else {\r\n        // find the shadow root that contains this element\r\n        var n = this;\r\n        while (n.parentNode) {\r\n          n = n.parentNode;\r\n        }\r\n        return n === document ? document.head : n;\r\n      }\r\n    },\r\n    scopeHasElementStyle: function(scope, descriptor) {\r\n      var rule = STYLE_SCOPE_ATTRIBUTE + '=' + this.localName + '-' + descriptor;\r\n      return scope.querySelector('style[' + rule + ']');\r\n    }\r\n  };\r\n  \r\n  // NOTE: use raw prototype traversal so that we ensure correct traversal\r\n  // on platforms where the protoype chain is simulated via __proto__ (IE10)\r\n  function getPrototypeOf(prototype) {\r\n    return prototype.__proto__;\r\n  }\r\n\r\n  // exports\r\n\r\n  scope.api.instance.styles = styles;\r\n  \r\n})(Polymer);\r\n","/* \r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n\r\n(function(scope) {\r\n\r\n  var path = {\r\n    addResolvePathApi: function() {\r\n      var root = this.elementPath();\r\n      // let assetpath attribute modify the resolve path\r\n      var assetPath = this.getAttribute('assetpath') || '';\r\n      var relPath = this.relPath;\r\n      this.prototype.resolvePath = function(inPath) {\r\n        var to = inPath;\r\n        if (assetPath) {\r\n          // assetPath is always a folder, drop the trailing '/'\r\n          var from = assetPath.slice(0, -1);\r\n          to = relPath(from, to);\r\n        }\r\n\r\n        return root + assetPath + to;\r\n      };\r\n    },\r\n    elementPath: function() {\r\n      return this.urlToPath(HTMLImports.getDocumentUrl(this.ownerDocument));\r\n    },\r\n    relPath: function(from, to) {\r\n      var fromParts = from.split('/');\r\n      var toParts = to.split('/');\r\n\r\n      // chop to common length\r\n      var common = false;\r\n      while(fromParts.length && toParts.length && fromParts[0] === toParts[0]) {\r\n        fromParts.shift();\r\n        toParts.shift();\r\n        common = true;\r\n      }\r\n\r\n      // if there were some commonalities, add '../' for differences\r\n      if (common) {\r\n        for (var i = 0; i < fromParts.length; i++) {\r\n          toParts.unshift('..');\r\n        }\r\n      }\r\n      return toParts.join('/');\r\n    },\r\n    urlToPath: function(url) {\r\n      if (!url) {\r\n        return '';\r\n      } else {\r\n        var parts = url.split('/');\r\n        parts.pop();\r\n        parts.push('');\r\n        return parts.join('/');\r\n      }\r\n    }\r\n  };\r\n\r\n  // exports\r\n  scope.api.declaration.path = path;\r\n\r\n})(Polymer);\r\n","/*\r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n(function(scope) {\r\n\r\n  // imports\r\n\r\n  var log = window.logFlags || {};\r\n  var api = scope.api.instance.styles;\r\n  var STYLE_SCOPE_ATTRIBUTE = api.STYLE_SCOPE_ATTRIBUTE;\r\n\r\n  // magic words\r\n\r\n  var STYLE_SELECTOR = 'style';\r\n  var SHEET_SELECTOR = '[rel=stylesheet]';\r\n  var STYLE_GLOBAL_SCOPE = 'global';\r\n  var SCOPE_ATTR = 'polymer-scope';\r\n\r\n  var styles = {\r\n    /**\r\n     * Install external stylesheets loaded in <element> elements into the \r\n     * element's template.\r\n     * @param elementElement The <element> element to style.\r\n     */\r\n    installSheets: function() {\r\n      this.cacheSheets();\r\n      this.cacheStyles();\r\n      this.installLocalSheets();\r\n      this.installGlobalStyles();\r\n    },\r\n    /**\r\n     * Remove all sheets from element and store for later use.\r\n     */\r\n    cacheSheets: function() {\r\n      this.sheets = this.findNodes(SHEET_SELECTOR);\r\n      this.sheets.forEach(function(s) {\r\n        if (s.parentNode) {\r\n          s.parentNode.removeChild(s);\r\n        }\r\n      });\r\n    },\r\n    cacheStyles: function() {\r\n      this.styles = this.findNodes(STYLE_SELECTOR + '[' + SCOPE_ATTR + ']');\r\n      this.styles.forEach(function(s) {\r\n        if (s.parentNode) {\r\n          s.parentNode.removeChild(s);\r\n        }\r\n      });\r\n    },\r\n    /**\r\n     * Takes external stylesheets loaded in an <element> element and moves\r\n     * their content into a <style> element inside the <element>'s template.\r\n     * The sheet is then removed from the <element>. This is done only so \r\n     * that if the element is loaded in the main document, the sheet does\r\n     * not become active.\r\n     * Note, ignores sheets with the attribute 'polymer-scope'.\r\n     * @param elementElement The <element> element to style.\r\n     */\r\n    installLocalSheets: function () {\r\n      var sheets = this.sheets.filter(function(s) {\r\n        return !s.hasAttribute(SCOPE_ATTR);\r\n      });\r\n      var content = this.templateContent();\r\n      if (content) {\r\n        var cssText = '';\r\n        sheets.forEach(function(sheet) {\r\n          cssText += cssTextFromSheet(sheet) + '\\n';\r\n        });\r\n        if (cssText) {\r\n          content.insertBefore(createStyleElement(cssText), content.firstChild);\r\n        }\r\n      }\r\n    },\r\n    findNodes: function(selector, matcher) {\r\n      var nodes = this.querySelectorAll(selector).array();\r\n      var content = this.templateContent();\r\n      if (content) {\r\n        var templateNodes = content.querySelectorAll(selector).array();\r\n        nodes = nodes.concat(templateNodes);\r\n      }\r\n      return matcher ? nodes.filter(matcher) : nodes;\r\n    },\r\n    templateContent: function() {\r\n      var template = this.querySelector('template');\r\n      return template && templateContent(template);\r\n    },\r\n    /**\r\n     * Promotes external stylesheets and <style> elements with the attribute \r\n     * polymer-scope='global' into global scope.\r\n     * This is particularly useful for defining @keyframe rules which \r\n     * currently do not function in scoped or shadow style elements.\r\n     * (See wkb.ug/72462)\r\n     * @param elementElement The <element> element to style.\r\n    */\r\n    // TODO(sorvell): remove when wkb.ug/72462 is addressed.\r\n    installGlobalStyles: function() {\r\n      var style = this.styleForScope(STYLE_GLOBAL_SCOPE);\r\n      applyStyleToScope(style, document.head);\r\n    },\r\n    cssTextForScope: function(scopeDescriptor) {\r\n      var cssText = '';\r\n      // handle stylesheets\r\n      var selector = '[' + SCOPE_ATTR + '=' + scopeDescriptor + ']';\r\n      var matcher = function(s) {\r\n        return matchesSelector(s, selector);\r\n      };\r\n      var sheets = this.sheets.filter(matcher);\r\n      sheets.forEach(function(sheet) {\r\n        cssText += cssTextFromSheet(sheet) + '\\n\\n';\r\n      });\r\n      // handle cached style elements\r\n      var styles = this.styles.filter(matcher);\r\n      styles.forEach(function(style) {\r\n        cssText += style.textContent + '\\n\\n';\r\n      });\r\n      return cssText;\r\n    },\r\n    styleForScope: function(scopeDescriptor) {\r\n      var cssText = this.cssTextForScope(scopeDescriptor);\r\n      return this.cssTextToScopeStyle(cssText, scopeDescriptor);\r\n    },\r\n    cssTextToScopeStyle: function(cssText, scopeDescriptor) {\r\n      if (cssText) {\r\n        var style = createStyleElement(cssText);\r\n        style.setAttribute(STYLE_SCOPE_ATTRIBUTE, this.getAttribute('name') +\r\n            '-' + scopeDescriptor);\r\n        return style;\r\n      }\r\n    }\r\n  };\r\n\r\n  function applyStyleToScope(style, scope) {\r\n    if (style) {\r\n      // TODO(sorvell): necessary for IE\r\n      // see https://connect.microsoft.com/IE/feedback/details/790212/\r\n      // cloning-a-style-element-and-adding-to-document-produces\r\n      // -unexpected-result#details\r\n      // var clone = style.cloneNode(true);\r\n      var clone = createStyleElement(style.textContent);\r\n      var attr = style.getAttribute(STYLE_SCOPE_ATTRIBUTE);\r\n      if (attr) {\r\n        clone.setAttribute(STYLE_SCOPE_ATTRIBUTE, attr);\r\n      }\r\n      scope.appendChild(clone);\r\n    }\r\n  }\r\n\r\n  function createStyleElement(cssText) {\r\n    var style = document.createElement('style');\r\n    style.textContent = cssText;\r\n    return style;\r\n  }\r\n\r\n  function cssTextFromSheet(sheet) {\r\n    return (sheet && sheet.__resource) || '';\r\n  }\r\n\r\n  function matchesSelector(node, inSelector) {\r\n    if (matches) {\r\n      return matches.call(node, inSelector);\r\n    }\r\n  }\r\n  var p = HTMLElement.prototype;\r\n  var matches = p.matches || p.matchesSelector || p.webkitMatchesSelector \r\n      || p.mozMatchesSelector;\r\n  \r\n  // exports\r\n\r\n  scope.api.declaration.styles = styles;\r\n  scope.applyStyleToScope = applyStyleToScope;\r\n  \r\n})(Polymer);\r\n","/*\r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n\r\n(function(scope) {\r\n\r\n  // imports\r\n\r\n  var api = scope.api.instance.events;\r\n  var log = window.logFlags || {};\r\n\r\n  // polymer-element declarative api: events feature\r\n\r\n  var events = { \r\n    parseHostEvents: function() {\r\n      // our delegates map\r\n      var delegates = this.prototype.eventDelegates;\r\n      // extract data from attributes into delegates\r\n      this.addAttributeDelegates(delegates);\r\n    },\r\n    addAttributeDelegates: function(delegates) {\r\n      // for each attribute\r\n      for (var i=0, a; a=this.attributes[i]; i++) {\r\n        // does it have magic marker identifying it as an event delegate?\r\n        if (api.hasEventPrefix(a.name)) {\r\n          // if so, add the info to delegates\r\n          delegates[api.removeEventPrefix(a.name)] = a.value.replace('{{', '')\r\n              .replace('}}', '').trim();\r\n        }\r\n      }\r\n    },\r\n    event_translations: {\r\n      webkitanimationstart: 'webkitAnimationStart',\r\n      webkitanimationend: 'webkitAnimationEnd',\r\n      webkittransitionend: 'webkitTransitionEnd',\r\n      domfocusout: 'DOMFocusOut',\r\n      domfocusin: 'DOMFocusIn'\r\n    }\r\n  };\r\n\r\n  // exports\r\n\r\n  scope.api.declaration.events = events;\r\n\r\n})(Polymer);","/*\r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n(function(scope) {\r\n\r\n  // element api\r\n\r\n  var properties = {\r\n    inferObservers: function(prototype) {\r\n      var observe = prototype.observe, property;\r\n      for (var n in prototype) {\r\n        if (n.slice(-7) === 'Changed') {\r\n          if (!observe) {\r\n            observe  = (prototype.observe = {});\r\n          }\r\n          property = n.slice(0, -7)\r\n          observe[property] = observe[property] || n;\r\n        }\r\n      }\r\n    },\r\n    optimizePropertyMaps: function(prototype) {\r\n      if (prototype.observe) {\r\n        // construct name list\r\n        var a = prototype._observeNames = [];\r\n        for (var n in prototype.observe) {\r\n          a.push(n);\r\n        }\r\n      }\r\n      if (prototype.publish) {\r\n        // construct name list\r\n        var a = prototype._publishNames = [];\r\n        for (var n in prototype.publish) {\r\n          a.push(n);\r\n        }\r\n      }\r\n    },\r\n    publishProperties: function(prototype, base) {\r\n      // if we have any properties to publish\r\n      var publish = prototype.publish;\r\n      if (publish) {\r\n        // transcribe `publish` entries onto own prototype\r\n        this.requireProperties(publish, prototype, base);\r\n        // construct map of lower-cased property names\r\n        prototype._publishLC = this.lowerCaseMap(publish);\r\n      }\r\n    },\r\n    requireProperties: function(properties, prototype, base) {\r\n      // ensure a prototype value for each property\r\n      for (var n in properties) {\r\n        if (prototype[n] === undefined && base[n] === undefined) {\r\n          prototype[n] = properties[n];\r\n        }\r\n      }\r\n    },\r\n    lowerCaseMap: function(properties) {\r\n      var map = {};\r\n      for (var n in properties) {\r\n        map[n.toLowerCase()] = n;\r\n      }\r\n      return map;\r\n    }\r\n  };\r\n\r\n  // exports\r\n\r\n  scope.api.declaration.properties = properties;\r\n\r\n})(Polymer);\r\n","/*\r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n(function(scope) {\r\n\r\n  // magic words\r\n\r\n  var ATTRIBUTES_ATTRIBUTE = 'attributes';\r\n\r\n  // attributes api\r\n\r\n  var attributes = {\r\n    inheritAttributesObjects: function(prototype) {\r\n      // chain our lower-cased publish map to the inherited version\r\n      this.inheritObject(prototype, 'publishLC');\r\n      // chain our instance attributes map to the inherited version\r\n      this.inheritObject(prototype, '_instanceAttributes');\r\n    },\r\n    publishAttributes: function(prototype, base) {\r\n      // merge names from 'attributes' attribute\r\n      var attributes = this.getAttribute(ATTRIBUTES_ATTRIBUTE);\r\n      if (attributes) {\r\n        // get properties to publish\r\n        var publish = prototype.publish || (prototype.publish = {});\r\n        // names='a b c' or names='a,b,c'\r\n        var names = attributes.split(attributes.indexOf(',') >= 0 ? ',' : ' ');\r\n        // record each name for publishing\r\n        for (var i=0, l=names.length, n; i<l; i++) {\r\n          // remove excess ws\r\n          n = names[i].trim();\r\n          // do not override explicit entries\r\n          if (n && publish[n] === undefined && base[n] === undefined) {\r\n            publish[n] = null;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    // record clonable attributes from <element>\r\n    accumulateInstanceAttributes: function() {\r\n      // inherit instance attributes\r\n      var clonable = this.prototype._instanceAttributes;\r\n      // merge attributes from element\r\n      var a$ = this.attributes;\r\n      for (var i=0, l=a$.length, a; (i<l) && (a=a$[i]); i++) {  \r\n        if (this.isInstanceAttribute(a.name)) {\r\n          clonable[a.name] = a.value;\r\n        }\r\n      }\r\n    },\r\n    isInstanceAttribute: function(name) {\r\n      return !this.blackList[name] && name.slice(0,3) !== 'on-';\r\n    },\r\n    // do not clone these attributes onto instances\r\n    blackList: {name: 1, 'extends': 1, constructor: 1, noscript: 1}\r\n  };\r\n\r\n  // add ATTRIBUTES_ATTRIBUTE to the blacklist\r\n  attributes.blackList[ATTRIBUTES_ATTRIBUTE] = 1;\r\n\r\n  // exports\r\n\r\n  scope.api.declaration.attributes = attributes;\r\n\r\n})(Polymer);\r\n","/*\r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n(function(scope) {\r\n\r\n  // imports\r\n  \r\n  var api = scope.api;\r\n  var isBase = scope.isBase;\r\n  var extend = scope.extend;\r\n\r\n  // prototype api\r\n\r\n  var prototype = {\r\n    register: function(name, extendee) {\r\n      // build prototype combining extendee, Polymer base, and named api\r\n      this.prototype = this.buildPrototype(name, extendee);\r\n      // back reference declaration element\r\n      // TODO(sjmiles): replace `element` with `elementElement` or `declaration`\r\n      this.prototype.element = this;\r\n      // more declarative features\r\n      this.desugar(name, extendee);\r\n      // register our custom element with the platform\r\n      this.registerPrototype(name, extendee);\r\n      // reference constructor in a global named by 'constructor' attribute\r\n      this.publishConstructor();\r\n    },\r\n    buildPrototype: function(name, extendee) {\r\n      // get our custom prototype (before chaining)\r\n      var prototype = scope.getRegisteredPrototype(name);\r\n      // get basal prototype\r\n      var base = this.generateBasePrototype(extendee);\r\n      // transcribe `attributes` declarations onto own prototype's `publish`\r\n      this.publishAttributes(prototype, base);\r\n      // `publish` properties to the prototype and to attribute watch\r\n      this.publishProperties(prototype, base);\r\n      // infer observers for `observe` list based on method names\r\n      this.inferObservers(prototype);\r\n      // chain various meta-data objects to inherited versions\r\n      this.inheritMetaData(prototype, base);\r\n      // chain custom api to inherited\r\n      prototype = this.chainObject(prototype, base);\r\n      // build side-chained lists to optimize iterations\r\n      this.optimizePropertyMaps(prototype);\r\n      // x-platform fixup\r\n      ensurePrototypeTraversal(prototype);\r\n      return prototype;\r\n    },\r\n    inheritMetaData: function(prototype, base) {\r\n      // chain observe object to inherited\r\n      this.inheritObject('observe', prototype, base);\r\n      // chain publish object to inherited\r\n      this.inheritObject('publish', prototype, base);\r\n      // chain our lower-cased publish map to the inherited version\r\n      this.inheritObject('_publishLC', prototype, base);\r\n      // chain our instance attributes map to the inherited version\r\n      this.inheritObject('_instanceAttributes', prototype, base);\r\n      // chain our event delegates map to the inherited version\r\n      this.inheritObject('eventDelegates', prototype, base);\r\n    },\r\n    // implement various declarative features\r\n    desugar: function(name, extendee) {\r\n      // compile list of attributes to copy to instances\r\n      this.accumulateInstanceAttributes();\r\n      // parse on-* delegates declared on `this` element\r\n      this.parseHostEvents();\r\n      // install external stylesheets as if they are inline\r\n      this.installSheets();\r\n      //\r\n      this.adjustShadowElement();\r\n      //\r\n      // TODO(sorvell): install a helper method this.resolvePath to aid in \r\n      // setting resource paths. e.g.\r\n      // this.$.image.src = this.resolvePath('images/foo.png')\r\n      // Potentially remove when spec bug is addressed.\r\n      // https://www.w3.org/Bugs/Public/show_bug.cgi?id=21407\r\n      this.addResolvePathApi();\r\n      // under ShadowDOMPolyfill, transforms to approximate missing CSS features\r\n      if (window.ShadowDOMPolyfill) {\r\n        Platform.ShadowCSS.shimStyling(this.templateContent(), name, extendee);\r\n      }\r\n      // allow custom element access to the declarative context\r\n      if (this.prototype.registerCallback) {\r\n        this.prototype.registerCallback(this);\r\n      }\r\n    },\r\n    // TODO(sorvell): remove when spec addressed:\r\n    // https://www.w3.org/Bugs/Public/show_bug.cgi?id=22460\r\n    // make <shadow></shadow> be <shadow><content></content></shadow>\r\n    adjustShadowElement: function() {\r\n      // TODO(sorvell): avoid under SD polyfill until this bug is addressed:\r\n      // https://github.com/Polymer/ShadowDOM/issues/297\r\n      if (!window.ShadowDOMPolyfill) {\r\n        var content = this.templateContent();\r\n        if (content) {\r\n          var s$ = content.querySelectorAll('shadow');\r\n          for (var i=0, l=s$.length, s; (i<l) && (s=s$[i]); i++) {\r\n            if (!s.children.length) {\r\n              s.appendChild(document.createElement('content'));\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    // if a named constructor is requested in element, map a reference\r\n    // to the constructor to the given symbol\r\n    publishConstructor: function() {\r\n      var symbol = this.getAttribute('constructor');\r\n      if (symbol) {\r\n        window[symbol] = this.ctor;\r\n      }\r\n    },\r\n    // build prototype combining extendee, Polymer base, and named api\r\n    generateBasePrototype: function(extnds) {\r\n      var prototype = this.findBasePrototype(extnds);\r\n      if (!prototype) {\r\n        // create a prototype based on tag-name extension\r\n        var prototype = HTMLElement.getPrototypeForTag(extnds);\r\n        // insert base api in inheritance chain (if needed)\r\n        prototype = this.ensureBaseApi(prototype);\r\n        // memoize this base\r\n        memoizedBases[extnds] = prototype;\r\n      }\r\n      return prototype;\r\n    },\r\n    findBasePrototype: function(name) {\r\n      return memoizedBases[name];\r\n    },\r\n    // install Polymer instance api into prototype chain, as needed \r\n    ensureBaseApi: function(prototype) {\r\n      if (!prototype.PolymerBase) {\r\n       prototype = Object.create(prototype);\r\n       // we need a unique copy of base api for each base prototype\r\n       // therefore we 'extend' here instead of simply chaining\r\n       // we could memoize instead, especially for the common cases,\r\n       // in particular, for base === HTMLElement.prototype\r\n       for (var n in api.instance) {\r\n         extend(prototype, api.instance[n]);\r\n       }\r\n      }\r\n      // return buffed-up prototype\r\n      return prototype;\r\n    },\r\n    // ensure prototype[name] inherits from a prototype.prototype[name]\r\n    inheritObject: function(name, prototype, base) {\r\n      // require an object\r\n      var source = prototype[name] || {};\r\n      // chain inherited properties onto a new object\r\n      prototype[name] = this.chainObject(source, base[name]);\r\n    },\r\n    // register 'prototype' to custom element 'name', store constructor \r\n    registerPrototype: function(name, extendee) { \r\n      var info = {\r\n        prototype: this.prototype\r\n      }\r\n      // native element must be specified in extends\r\n      var typeExtension = this.findTypeExtension(extendee);\r\n      if (typeExtension) {\r\n        info.extends = typeExtension;\r\n      }\r\n      // register the custom type\r\n      this.ctor = document.register(name, info);\r\n      // constructor shenanigans\r\n      this.prototype.constructor = this.ctor;\r\n      // register the prototype with HTMLElement for name lookup\r\n      HTMLElement.register(name, this.prototype);\r\n    }, \r\n    findTypeExtension: function(name) {\r\n      if (name && name.indexOf('-') < 0) {\r\n        return name;\r\n      } else {\r\n        var p = this.findBasePrototype(name);\r\n        if (p.element) {\r\n          return this.findTypeExtension(p.element.extends);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  if (Object.__proto__) {\r\n    prototype.chainObject = function(object, inherited) {\r\n      if (object && inherited && object !== inherited) {\r\n        object.__proto__ = inherited;\r\n      }\r\n      return object;\r\n    }\r\n  } else {\r\n    prototype.chainObject = function(object, inherited) {\r\n      if (object && inherited && object !== inherited) {\r\n        var chained = Object.create(inherited);\r\n        object = extend(chained, object);\r\n      }\r\n      return object;\r\n    }\r\n  }\r\n\r\n  // memoize base prototypes\r\n  memoizedBases = {};\r\n\r\n  // On platforms that do not support __proto__ (version of IE), the prototype\r\n  // chain of a custom element is simulated via installation of __proto__.\r\n  // Although custom elements manages this, we install it here so it's\r\n  // available during desugaring.\r\n  function ensurePrototypeTraversal(prototype) {\r\n    if (!Object.__proto__) {\r\n      var ancestor = Object.getPrototypeOf(prototype);\r\n      prototype.__proto__ = ancestor;\r\n      if (isBase(ancestor)) {\r\n        ancestor.__proto__ = Object.getPrototypeOf(ancestor);\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  api.declaration.prototype = prototype;\r\n\r\n})(Polymer);\r\n","/*\r\n * Copyright 2013 The Polymer Authors. All rights reserved.\r\n * Use of this source code is governed by a BSD-style\r\n * license that can be found in the LICENSE file.\r\n */\r\n(function(scope) {\r\n\r\n  // imports\r\n\r\n  var extend = scope.extend;\r\n  var apis = scope.api.declaration;\r\n\r\n  // imperative implementation: Polymer()\r\n\r\n  // specify an 'own' prototype for tag `name`\r\n  function element(name, prototype) {\r\n    //console.log('registering [' + name + ']');\r\n    // cache the prototype\r\n    prototypesByName[name] = prototype || {};\r\n    // notify the registrar waiting for 'name', if any\r\n    notifyPrototype(name);\r\n  }\r\n\r\n  // declarative implementation: <polymer-element>\r\n\r\n  var prototype = extend(Object.create(HTMLElement.prototype), {\r\n    createdCallback: function() {\r\n      // fetch the element name\r\n      this.name = this.getAttribute('name');\r\n      // fetch our extendee name\r\n      this.extends = this.getAttribute('extends');\r\n      // install element definition, if ready\r\n      this.registerWhenReady();\r\n    },\r\n    registerWhenReady: function() {\r\n      // if we have no prototype, wait\r\n      if (this.waitingForPrototype(this.name)) {\r\n        return;\r\n      }\r\n      var extendee = this.extends;\r\n      if (this.waitingForExtendee(extendee)) {\r\n        //console.warn(this.name + ': waitingForExtendee:' + extendee);\r\n        return;\r\n      }\r\n      // TODO(sjmiles): HTMLImports polyfill awareness:\r\n      // elements in the main document are likely to parse\r\n      // in advance of elements in imports because the\r\n      // polyfill parser is simulated\r\n      // therefore, wait for imports loaded before\r\n      // finalizing elements in the main document\r\n      if (document.contains(this)) {\r\n        whenImportsLoaded(function() {\r\n          this._register(extendee);\r\n        }.bind(this));\r\n      } else {\r\n        this._register(extendee);\r\n      }\r\n    },\r\n    _register: function(extendee) {\r\n      //console.group('registering', this.name);\r\n      this.register(this.name, extendee);\r\n      //console.groupEnd();\r\n      // subclasses may now register themselves\r\n      notifySuper(this.name);\r\n    },\r\n    waitingForPrototype: function(name) {\r\n      if (!getRegisteredPrototype(name)) {\r\n        // then wait for a prototype\r\n        waitPrototype[name] = this;\r\n        // if explicitly marked as 'noscript'\r\n        if (this.hasAttribute('noscript')) {\r\n          // TODO(sorvell): CustomElements polyfill awareness:\r\n          // noscript elements should upgrade in logical order\r\n          // script injection ensures this under native custom elements;\r\n          // under imports + ce polyfills, scripts run before upgrades.\r\n          // dependencies should be ready at upgrade time so register\r\n          // prototype at this time.\r\n          if (window.CustomElements && !CustomElements.useNative) {\r\n            element(name);\r\n          } else {\r\n            var script = document.createElement('script');\r\n            script.textContent = 'Polymer(\\'' + name + '\\');';\r\n            this.appendChild(script);\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    },\r\n    waitingForExtendee: function(extendee) {\r\n      // if extending a custom element...\r\n      if (extendee && extendee.indexOf('-') >= 0) {\r\n        // wait for the extendee to be registered first\r\n        if (!isRegistered(extendee)) {\r\n          (waitSuper[extendee] = (waitSuper[extendee] || [])).push(this);\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  // semi-pluggable APIs \r\n  // TODO(sjmiles): should be fully pluggable (aka decoupled, currently\r\n  // the various plugins are allowed to depend on each other directly)\r\n  Object.keys(apis).forEach(function(n) {\r\n    extend(prototype, apis[n]);\r\n  });\r\n\r\n  // utility and bookkeeping\r\n  \r\n  // maps tag names to prototypes\r\n  var prototypesByName = {};\r\n\r\n  function getRegisteredPrototype(name) {\r\n    return prototypesByName[name];\r\n  }\r\n\r\n  // elements waiting for prototype, by name\r\n  var waitPrototype = {};\r\n\r\n  function notifyPrototype(name) {\r\n    if (waitPrototype[name]) {\r\n      waitPrototype[name].registerWhenReady();\r\n      delete waitPrototype[name];\r\n    }\r\n  }\r\n\r\n  // elements waiting for super, by name\r\n  var waitSuper = {};\r\n\r\n  function notifySuper(name) {\r\n    registered[name] = true;\r\n    var waiting = waitSuper[name];\r\n    if (waiting) {\r\n      waiting.forEach(function(w) {\r\n        w.registerWhenReady();\r\n      });\r\n      delete waitSuper[name];\r\n    }\r\n  }\r\n\r\n  // track document.register'ed tag names\r\n\r\n  var registered = {};\r\n\r\n  function isRegistered(name) {\r\n    return registered[name];\r\n  }\r\n\r\n  function whenImportsLoaded(doThis) {\r\n    if (window.HTMLImports && !HTMLImports.readyTime) {\r\n      addEventListener('HTMLImportsLoaded', doThis);\r\n    } else {\r\n      doThis();\r\n    }\r\n  }\r\n\r\n  // exports\r\n  \r\n  scope.getRegisteredPrototype = getRegisteredPrototype;\r\n  \r\n  // namespace shenanigans so we can expose our scope on the registration \r\n  // function\r\n\r\n  // TODO(sjmiles): find a way to do this that is less terrible\r\n  // copy window.Polymer properties onto `element()`\r\n  extend(element, scope);\r\n  // make window.Polymer reference `element()`\r\n  window.Polymer = element;\r\n\r\n  // register polymer-element with document\r\n  document.register('polymer-element', {prototype: prototype});\r\n})(Polymer);\r\n"]}